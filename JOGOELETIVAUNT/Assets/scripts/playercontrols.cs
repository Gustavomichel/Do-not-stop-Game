//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/scripts/playercontrols.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Playercontrols : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Playercontrols()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playercontrols"",
    ""maps"": [
        {
            ""name"": ""player"",
            ""id"": ""78e3f150-086c-4abc-8bda-dc43a05dbb3c"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ef612eab-c589-4ea1-b945-16ab6c272e0c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""crouch"",
                    ""type"": ""Button"",
                    ""id"": ""4d66d4e8-0bf1-4dd2-95d5-3c38575b2827"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a838ee63-3cf0-40b8-b176-ac12f4505ba3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c871fd5c-8bda-4a5c-9a81-1adf6fb075c9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""playertwo"",
            ""id"": ""15b8d541-8696-45dd-b943-cee52bf70460"",
            ""actions"": [
                {
                    ""name"": ""Jump2"",
                    ""type"": ""Button"",
                    ""id"": ""fc7c53d6-030a-40f8-a96c-11b8a1533bab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""crouch"",
                    ""type"": ""Button"",
                    ""id"": ""641be7ed-83d9-45e3-96f7-302a70dc51f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29c00e65-b307-461b-bbde-ca436a353961"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Jump2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c8203c5-f4f4-4d3f-afaf-e7fd9a9479a1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""keyboard"",
            ""bindingGroup"": ""keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // player
        m_player = asset.FindActionMap("player", throwIfNotFound: true);
        m_player_Jump = m_player.FindAction("Jump", throwIfNotFound: true);
        m_player_crouch = m_player.FindAction("crouch", throwIfNotFound: true);
        // playertwo
        m_playertwo = asset.FindActionMap("playertwo", throwIfNotFound: true);
        m_playertwo_Jump2 = m_playertwo.FindAction("Jump2", throwIfNotFound: true);
        m_playertwo_crouch = m_playertwo.FindAction("crouch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player
    private readonly InputActionMap m_player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_player_Jump;
    private readonly InputAction m_player_crouch;
    public struct PlayerActions
    {
        private @Playercontrols m_Wrapper;
        public PlayerActions(@Playercontrols wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_player_Jump;
        public InputAction @crouch => m_Wrapper.m_player_crouch;
        public InputActionMap Get() { return m_Wrapper.m_player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @crouch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @crouch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @crouch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @crouch.started += instance.OnCrouch;
                @crouch.performed += instance.OnCrouch;
                @crouch.canceled += instance.OnCrouch;
            }
        }
    }
    public PlayerActions @player => new PlayerActions(this);

    // playertwo
    private readonly InputActionMap m_playertwo;
    private IPlayertwoActions m_PlayertwoActionsCallbackInterface;
    private readonly InputAction m_playertwo_Jump2;
    private readonly InputAction m_playertwo_crouch;
    public struct PlayertwoActions
    {
        private @Playercontrols m_Wrapper;
        public PlayertwoActions(@Playercontrols wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump2 => m_Wrapper.m_playertwo_Jump2;
        public InputAction @crouch => m_Wrapper.m_playertwo_crouch;
        public InputActionMap Get() { return m_Wrapper.m_playertwo; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayertwoActions set) { return set.Get(); }
        public void SetCallbacks(IPlayertwoActions instance)
        {
            if (m_Wrapper.m_PlayertwoActionsCallbackInterface != null)
            {
                @Jump2.started -= m_Wrapper.m_PlayertwoActionsCallbackInterface.OnJump2;
                @Jump2.performed -= m_Wrapper.m_PlayertwoActionsCallbackInterface.OnJump2;
                @Jump2.canceled -= m_Wrapper.m_PlayertwoActionsCallbackInterface.OnJump2;
                @crouch.started -= m_Wrapper.m_PlayertwoActionsCallbackInterface.OnCrouch;
                @crouch.performed -= m_Wrapper.m_PlayertwoActionsCallbackInterface.OnCrouch;
                @crouch.canceled -= m_Wrapper.m_PlayertwoActionsCallbackInterface.OnCrouch;
            }
            m_Wrapper.m_PlayertwoActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump2.started += instance.OnJump2;
                @Jump2.performed += instance.OnJump2;
                @Jump2.canceled += instance.OnJump2;
                @crouch.started += instance.OnCrouch;
                @crouch.performed += instance.OnCrouch;
                @crouch.canceled += instance.OnCrouch;
            }
        }
    }
    public PlayertwoActions @playertwo => new PlayertwoActions(this);
    private int m_keyboardSchemeIndex = -1;
    public InputControlScheme keyboardScheme
    {
        get
        {
            if (m_keyboardSchemeIndex == -1) m_keyboardSchemeIndex = asset.FindControlSchemeIndex("keyboard");
            return asset.controlSchemes[m_keyboardSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
    public interface IPlayertwoActions
    {
        void OnJump2(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
}
